#!/usr/bin/env bash

# The Cloud Foundry Python Buildpack. This script accepts parameters for a build
# directory, a cache directory, and a directory for app environment variables.
#
#     $ ./bin/supply <build_dir> <cache_dir> <deps_dir> <deps_index>

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname "$BIN_DIR")
BUILD_DIR=$1
CACHE_DIR=$2
DEPS_DIR=$3
DEPS_IDX=$4
export BIN_DIR BUILD_DIR CACHE_DIR DEPS_DIR DEPS_IDX

# START CF Common
export BUILDPACK_PATH=$ROOT_DIR
export BUILDPACK_DIR=$ROOT_DIR
source $ROOT_DIR/compile-extensions/lib/common

$ROOT_DIR/compile-extensions/bin/check_stack_support

$ROOT_DIR/compile-extensions/bin/check_buildpack_version $ROOT_DIR $CACHE_DIR

if [ -n "$DEPS_DIR" ]; then
  env_vars=$($BUILDPACK_PATH/compile-extensions/bin/build_path_from_supply $DEPS_DIR)
  for env_var in $env_vars; do
    export $env_var
  done
fi
# END CF Common

echo "-----> Supplying Python"

PIP_VERSION="9.0.1"

# Common Problem Warnings
### TODO WARNINGS_LOG is read but not written to, does it work?
export WARNINGS_LOG=$(mktemp)
export RECOMMENDED_PYTHON_VERSION=$DEFAULT_PYTHON_VERSION

# Prepend proper environment variables for Python use.
export PYTHONUNBUFFERED=1
export LANG=en_US.UTF-8

## TODO we may need something special for this
# export PKG_CONFIG_PATH=/app/.cloudfoundry/vendor/lib/pkg-config:/app/.cloudfoundry/python/lib/pkg-config:$PKG_CONFIG_PATH

# Switch to the repo's context.
cd $BUILD_DIR

# Warn for lack of Procfile.
if [[ ! -f Procfile ]]; then
  puts-warn 'Warning: Your application is missing a Procfile. This file tells Cloud Foundry how to run your application.'
  puts-warn 'Learn more: https://docs.cloudfoundry.org/buildpacks/prod-server.html#procfile'
fi

setenv () {
  env_name=$1
  env_val=$2
  if [[ -z "${!env_name}" ]]; then
    export "$env_name"=$env_val
  else
    export "$env_name"=$env_val:"${!env_name}"
  fi
}

export PYTHONUNBUFFERED=1
export LANG=en_US.UTF-8

setenv PATH $DEPS_DIR/$DEPS_IDX/bin
setenv C_INCLUDE_PATH $DEPS_DIR/$DEPS_IDX/include
setenv CPLUS_INCLUDE_PATH $DEPS_DIR/$DEPS_IDX/include
setenv LIBRARY_PATH $DEPS_DIR/$DEPS_IDX/lib
setenv LD_LIBRARY_PATH $DEPS_DIR/$DEPS_IDX/lib
setenv PKG_CONFIG_PATH $DEPS_DIR/$DEPS_IDX/pkgconfig

# Restore old artifacts from the cache.
# (Move cache dirs to build dir (will copy back after build))
# TODO What is vendor for ???
mv $CACHE_DIR/python $DEPS_DIR/$DEPS_IDX/python &> /dev/null || true
mv $CACHE_DIR/vendor $DEPS_DIR/$DEPS_IDX/vendor &> /dev/null || true
if [[ -d $CACHE_DIR/src ]]; then
	mv $CACHE_DIR/src $DEPS_DIR/$DEPS_IDX/src &> /dev/null || true
fi

# Install pip-pop
cp -r $BUILDPACK_DIR/vendor/pip-pop $DEPS_DIR/$DEPS_IDX/pip-pop

# Experimental pre_compile hook.
source $BIN_DIR/steps/hooks/pre_compile ## TODO ; here or in finalize?

# Install Python.
source $BIN_DIR/steps/python

source $BIN_DIR/steps/cryptography

source $BIN_DIR/steps/pylibmc

# TODO should this happen in supply or finalize
GUNICORN_PROFILE_PATH="$DEPS_DIR/$DEPS_IDX/profile.d/python.gunicorn.sh"
cp $ROOT_DIR/vendor/python.gunicorn.sh $GUNICORN_PROFILE_PATH


cp -Rl $DEPS_DIR/$DEPS_IDX/python $CACHE_DIR/
cp -Rl $DEPS_DIR/$DEPS_IDX/vendor $CACHE_DIR/ &> /dev/null || true
if [[ -d $DEPS_DIR/$DEPS_IDX/src ]]; then
	cp -Rl $DEPS_DIR/$DEPS_IDX/src $CACHE_DIR/ &> /dev/null || true
fi

# Sets up the environment variables for subsequent processes run by
# multibuildpack.

ENV_DIR=$DEPS_DIR/$DEPS_IDX/env

mkdir -p $ENV_DIR
echo $PYTHONUNBUFFERED > $ENV_DIR/PYTHONUNBUFFERED
echo $LANG > $ENV_DIR/LANG
echo $C_INCLUDE_PATH > $ENV_DIR/C_INCLUDE_PATH
echo $CPLUS_INCLUDE_PATH > $ENV_DIR/CPLUS_INCLUDE_PATH
echo $LIBRARY_PATH > $ENV_DIR/LIBRARY_PATH
echo $PKG_CONFIG_PATH > $ENV_DIR/PKG_CONFIG_PATH

# Set up the profile.d for this buildpack

PROFILE_PATH=$DEPS_DIR/$DEPS_IDX/profile.d

mkdir -p $PROFILE_PATH
echo "export PYTHONUNBUFFERED=$PYTHONUNBUFFERED" >> $PROFILE_PATH/python.sh
echo "export LANG=$LANG" >> $PROFILE_PATH/python.sh

echo "export PATH=\$HOME/$PATH\$([[ ! -z "\${PATH}" ]] && echo ":\$PATH")" >> $PROFILE_PATH/python.sh
echo "export LD_LIBRARY_PATH=\$HOME/$LD_LIBRARY_PATH\$([[ ! -z "\$LD_LIBRARY_PATH" ]] && echo ":\$LD_LIBRARY_PATH")" >> $PROFILE_PATH/python.sh
echo "export PKG_CONFIG_PATH=\$HOME/$PKG_CONFIG_PATH\$([[ ! -z "\$PKG_CONFIG_PATH" ]] && echo ":\$PKG_CONFIG_PATH")" >> $PROFILE_PATH/python.sh
echo "export C_INCLUDE_PATH=\$HOME/$C_INCLUDE_PATH\$([[ ! -z "\$C_INCLUDE_PATH" ]] && echo ":\$C_INCLUDE_PATH")" >> $PROFILE_PATH/python.sh
echo "export CPLUS_INCLUDE_PATH=\$HOME/$CPLUS_INCLUDE_PATH\$([[ ! -z "\$CPLUS_INCLUDE_PATH" ]] && echo ":\$CPLUS_INCLUDE_PATH")" >> $PROFILE_PATH/python.sh
echo "export LIBRARY_PATH=\$HOME/$LIBRARY_PATH\$([[ ! -z \$LIBRARY_PATH ]] && echo ":\$LIBRARY_PATH")" >> $PROFILE_PATH/python.sh

# Write config.yml 

$BUILDPACK_PATH/compile-extensions/bin/write_config_yml $BUILDPACK_DIR $DEPS_DIR/$DEPS_IDX
