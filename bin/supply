#!/usr/bin/env bash

# The Cloud Foundry Python Buildpack. This script accepts parameters for a build
# directory, a cache directory, and a directory for app environment variables.
#
#     $ ./bin/supply <build_dir> <cache_dir> <deps_dir> <deps_index>

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname "$BIN_DIR")
BUILD_DIR=$1
CACHE_DIR=$2
DEPS_DIR=$3
DEPS_IDX=$4
export BIN_DIR BUILD_DIR CACHE_DIR DEPS_DIR DEPS_IDX

export BUILDPACK_PATH=$ROOT_DIR
export BUILDPACK_DIR=$ROOT_DIR
source $ROOT_DIR/compile-extensions/lib/common
source $BIN_DIR/utils

#setup directories
export ENV_DIR=$DEPS_DIR/$DEPS_IDX/env
mkdir -p $ENV_DIR

PROFILE_PATH=$DEPS_DIR/$DEPS_IDX/profile.d
mkdir -p $PROFILE_PATH

mkdir -p $CACHE_DIR
mkdir -p $DEPS_DIR/$DEPS_IDX/bin
mkdir -p $DEPS_DIR/$DEPS_IDX/lib
mkdir -p $DEPS_DIR/$DEPS_IDX/include
mkdir -p $DEPS_DIR/$DEPS_IDX/pkgconfig

$ROOT_DIR/compile-extensions/bin/check_stack_support

$ROOT_DIR/compile-extensions/bin/check_buildpack_version $ROOT_DIR $CACHE_DIR

env_vars=$($BUILDPACK_PATH/compile-extensions/bin/build_path_from_supply $DEPS_DIR)
for env_var in $env_vars; do
  export $env_var
done

if [ -f $BUILD_DIR/environment.yml ]; then
  echo "----------------- USING CONDA BUILDPACK -----------------"

  # Experimental pre_compile hook.
  pushd $BUILD_DIR
    source $BIN_DIR/steps/hooks/pre_compile
  popd

  $BIN_DIR/steps/conda-supply

  $BUILDPACK_PATH/compile-extensions/bin/write_config_yml $BUILDPACK_DIR $DEPS_DIR/$DEPS_IDX
  exit 0
fi

PIP_VERSION="9.0.1"

# Common Problem Warnings
### TODO WARNINGS_LOG is read but not written to, does it work?
export WARNINGS_LOG=$(mktemp)
export RECOMMENDED_PYTHON_VERSION=$DEFAULT_PYTHON_VERSION

# Prepend proper environment variables for Python use.
# TODO override?
export PYTHONUNBUFFERED=true
export LANG=en_US.UTF-8

set-env-prepend PATH $DEPS_DIR/$DEPS_IDX/bin
set-env-prepend LD_LIBRARY_PATH $DEPS_DIR/$DEPS_IDX/lib

# Switch to the repo's context.
cd $BUILD_DIR

# If no requirements.txt file given, assume `setup.py develop` is intended.
if [ ! -f requirements.txt ]; then
  echo "-e ." > requirements.txt
fi

# Warn for lack of Procfile.
if [[ ! -f Procfile ]]; then
  puts-warn 'Warning: Your application is missing a Procfile. This file tells Cloud Foundry how to run your application.'
  puts-warn 'Learn more: https://docs.cloudfoundry.org/buildpacks/prod-server.html#procfile'
fi

# Restore old artifacts from the cache.
# (Move cache dirs to build dir (will copy back after build))
mv $CACHE_DIR/python $DEPS_DIR/$DEPS_IDX/python &> /dev/null || true
mv $CACHE_DIR/vendor $DEPS_DIR/$DEPS_IDX/vendor &> /dev/null || true
if [[ -d $CACHE_DIR/src ]]; then
	mv $CACHE_DIR/src $DEPS_DIR/$DEPS_IDX/src &> /dev/null || true
fi

# Install pip-pop
cp -r $BUILDPACK_DIR/vendor/pip-pop $DEPS_DIR/$DEPS_IDX/pip-pop
pushd $DEPS_DIR/$DEPS_IDX/bin >/dev/null
  ln -s ../pip-pop/* .
popd >/dev/null

# Experimental pre_compile hook.
source $BIN_DIR/steps/hooks/pre_compile

# Install Python,.
source $BIN_DIR/steps/python

source $BIN_DIR/steps/mercurial

source $BIN_DIR/steps/cryptography

source $BIN_DIR/steps/pylibmc

## Here or finalize??
GUNICORN_PROFILE_PATH="$PROFILE_PATH/python.gunicorn.sh"
cp $ROOT_DIR/vendor/python.gunicorn.sh $GUNICORN_PROFILE_PATH

set_default_profile_d PYTHONHASHSEED random
echo random > $ENV_DIR/PYTHONHASHSEED

set_default_profile_d PYTHONPATH "\$DEPS_DIR/$DEPS_IDX"
echo "$DEPS_DIR/$DEPS_IDX" > $ENV_DIR/PYTHONPATH

set_default_profile_d LANG en_US.UTF-8
echo en_US.UTF-8 > $ENV_DIR/LANG

append_profile_d PYTHONHOME "\$DEPS_DIR/$DEPS_IDX/python"
echo $DEPS_DIR/$DEPS_IDX/python > $ENV_DIR/PYTHONHOME

append_profile_d PYTHONBUFFERED true
echo true > $ENV_DIR/PYTHONBUFFERED

echo "$DEPS_DIR/$DEPS_IDX/lib" > $ENV_DIR/LIBRARY_PATH

# Write config.yml
$BUILDPACK_PATH/compile-extensions/bin/write_config_yml $BUILDPACK_DIR $DEPS_DIR/$DEPS_IDX
